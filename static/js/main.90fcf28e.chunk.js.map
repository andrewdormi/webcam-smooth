{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["camera","scene","renderer","uniforms","App","useState","sigma","setSigma","radius","setRadius","threshold","setThreshold","_video","useRef","_canvas","update","stream","requestAnimationFrame","vid","current","width","videoWidth","height","videoHeight","THREE","position","z","context","getContext","alpha","antialias","canvas","setPixelRatio","window","devicePixelRatio","setSize","texture","geometry","iChannel0","type","value","resolution","shaderMaterial","fragmentShader","document","getElementById","textContent","trim","transparent","depthTest","needsUpdate","mesh","add","render","useEffect","a","navigator","mediaDevices","getUserMedia","video","ideal","srcObject","className","ref","autoPlay","playsInline","min","max","step","onChange","e","target","id","Boolean","location","hostname","match","ReactDOM","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90fcf28e.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport * as THREE from \"three\";\nimport './App.css';\n\nlet camera, scene, renderer, uniforms;\n\nfunction App() {\n    const [sigma, setSigma] = useState(10.0);\n    const [radius, setRadius] = useState(1);\n    const [threshold, setThreshold] = useState(0.05);\n\n    const _video = useRef();\n    const _canvas = useRef();\n\n    const render = () => {\n        const vid = _video.current;\n        const width = vid.videoWidth\n        const height = vid.videoHeight;\n        if (!width || !height) {\n            return;\n        }\n        if (!camera) {\n            camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 1000);\n            camera.position.z = 1;\n            scene = new THREE.Scene();\n\n            const context = _canvas.current.getContext('webgl2', {alpha: false});\n            renderer = new THREE.WebGLRenderer({\n                alpha: true,\n                antialias: true,\n                canvas: _canvas.current,\n                context: context\n            });\n            renderer.setPixelRatio(window.devicePixelRatio);\n            renderer.setSize(width, height);\n\n            const texture = new THREE.VideoTexture(vid);\n            const geometry = new THREE.PlaneGeometry(width, height);\n\n            uniforms = {\n                iChannel0: {type: \"t\", value: texture},\n                resolution: {type: 'v2', value: new THREE.Vector2(width * 2, height * 2)},\n                sigma: {type: \"f\", value: sigma},\n                radius: {type: \"f\", value: radius},\n                threshold: {type: \"f\", value: threshold},\n            };\n            const shaderMaterial = new THREE.ShaderMaterial({\n                uniforms,\n                fragmentShader: document.getElementById('fs').textContent.trim(),\n                transparent: true,\n                depthTest: false\n            });\n            shaderMaterial.needsUpdate = true;\n            const mesh = new THREE.Mesh(geometry, shaderMaterial);\n            scene.add(mesh);\n\n        }\n        renderer.render(scene, camera);\n    }\n    const update = (stream) => {\n        requestAnimationFrame(() => update(stream));\n        render(stream);\n    };\n    useEffect(() => {\n        (async () => {\n            const stream = await navigator.mediaDevices.getUserMedia({video: {height: {ideal: 480}}});\n            _video.current.srcObject = stream;\n            update(stream);\n        })()\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <div>\n                <div><b>original</b></div>\n                <video ref={_video} autoPlay playsInline/>\n            </div>\n            <div>\n                <div><b>shader</b></div>\n                <canvas ref={_canvas}/>\n                <div>sigma</div>\n                <input type=\"range\" min=\"0\" max=\"10\" step=\"0.1\"\n                       value={sigma}\n                       onChange={e => {\n                           setSigma(e.target.value);\n                           uniforms.sigma.value = e.target.value;\n                       }}/>\n                {sigma}\n                <div>radius</div>\n                <input type=\"range\" min=\"0\" max=\"10\" step=\"0.1\"\n                       value={radius}\n                       onChange={e => {\n                           setRadius(e.target.value);\n                           uniforms.radius.value = e.target.value;\n                       }}/>\n                {radius}\n                <div>threshold</div>\n                <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\"\n                       value={threshold}\n                       onChange={e => {\n                           setThreshold(e.target.value);\n                           uniforms.threshold.value = e.target.value;\n                       }}/>\n                {threshold}\n            </div>\n            <script id=\"fs\" type=\"x-shader/x-fragment\">\n                {`\n#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439 // 1.0/SQRT_OF_2PI\n#define INV_PI 0.31830988618379067153776752674503\nuniform vec2      resolution;\nuniform sampler2D iChannel0;\nuniform float  sigma;\nuniform float  radius;\nuniform float  threshold;\n\nvec4 smartDeNoise(sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold)\n{\n    float radius = round(kSigma*sigma);\n    float radQ = radius * radius;\n\n    float invSigmaQx2 = .5 / (sigma * sigma);      // 1.0 / (sigma^2 * 2.0)\n    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // 1.0 / (sqrt(PI) * sigma)\n\n    float invThresholdSqx2 = .5 / (threshold * threshold);     // 1.0 / (sigma^2 * 2.0)\n    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;   // 1.0 / (sqrt(2*PI) * sigma)\n\n    vec4 centrPx = texture(tex,uv);\n\n    float zBuff = 0.0;\n    vec4 aBuff = vec4(0.0);\n    vec2 size = vec2(textureSize(tex, 0));\n\n    for(float x=-radius; x <= radius; x++) {\n        float pt = sqrt(radQ-x*x);  // pt = yRadius: have circular trend\n        for(float y=-pt; y <= pt; y++) {\n            vec2 d = vec2(x,y);\n\n            float blurFactor = exp( -dot(d , d) * invSigmaQx2 ) * invSigmaQx2PI;\n\n            vec4 walkPx =  texture(tex,uv+d/size);\n\n            vec4 dC = walkPx-centrPx;\n            float deltaFactor = exp( -dot(dC, dC) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;\n\n            zBuff += deltaFactor;\n            aBuff += deltaFactor*walkPx;\n        }\n    }\n    return aBuff/zBuff;\n}\n\nvoid main( void )\n{\n    vec2 pos = gl_FragCoord.xy / resolution.xy;\n     //gl_FragColor = vec4(1.0,pos.x,pos.y,1.0);\n    //vec2 uv = vec2(gl_FragCoord.xy / wSize);\n    gl_FragColor = smartDeNoise(iChannel0, vec2(pos.x,pos.y), sigma, radius, threshold);\n    //gl_FragColor = texture2D( iChannel0, gl_FragCoord.xy );\n}\n                `}\n            </script>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}